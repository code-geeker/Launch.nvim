*mb_strimwidth*

(PHP 4 >= 4.0.6, PHP 5, PHP 7, PHP 8)

mb_strimwidth — Get truncated string with specified width

===============================================================================
[ Description ]

  mb_strimwidth(    string~
  $string,    int $start,    int~
  $width,    string $trim_marker =~
  "",    ?string $encoding = null): string~

Truncates string {string} to specified {width}, where halfwidth characters
count as 1, and fullwidth characters count as 2. See » http://www.unicode.org/
reports/tr11/ for details regarding East Asian character widths.

===============================================================================
[ Parameters ]

{string}

  The string being decoded.

{start}

  The start position offset. Number of characters from the beginning of string
  (first character is 0), or if start is negative, number of characters from
  the end of the string.

{width}

  The width of the desired trim. If negative width is specified, count from the
  end of the string.


    Note:

    Passing negative width is deprecated as of PHP 8.3.0.

{trim_marker}

  A string that is added to the end of string when string is truncated.

{encoding}

  The {encoding} parameter is the character encoding. If it is omitted or null,
  the internal character encoding value will be used.

===============================================================================
[ Return Values ]

The truncated string. If {trim_marker} is set, {trim_marker} replaces the last
chars to match the {width}.

===============================================================================
[ Changelog ]

Version                           Description
8.3.0   Passing a negative {width} to mb_strimwidth() is now deprecated.
8.0.0   {encoding} is nullable now.
7.1.0   Support for negative {start}s and {width}s has been added.

===============================================================================
[ Examples ]

Example #1 mb_strimwidth() example

<?php >
  echo mb_strimwidth("Hello World", 0, 10, "...");
  // output: "Hello W..."
<?>

===============================================================================
[ See Also ]

 * |mb_strwidth| - Return width of string
 * |mb_internal_encoding| - Set/Get internal character encoding


vim:ft=help: