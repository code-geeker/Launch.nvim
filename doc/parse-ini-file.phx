*parse_ini_file*

(PHP 4, PHP 5, PHP 7, PHP 8)

parse_ini_file â€” Parse a configuration file

===============================================================================
[ Description ]

  parse_ini_file(string $filename, bool $process_sections = false, int~
  $scanner_mode = INI_SCANNER_NORMAL): array|false~

parse_ini_file() loads in the ini file specified in {filename}, and returns the
settings in it in an associative array.

The structure of the ini file is the same as the php.ini's.

===============================================================================
[ Parameters ]

{filename}

  The filename of the ini file being parsed. If a relative path is used, it is
  evaluated relative to the current working directory, then the include_path.

{process_sections}

  By setting the {process_sections} parameter to true, you get a
  multidimensional array, with the section names and settings included. The
  default for {process_sections} is false

{scanner_mode}

  Can either be INI_SCANNER_NORMAL (default) or INI_SCANNER_RAW. If
  INI_SCANNER_RAW is supplied, then option values will not be parsed.

  As of PHP 5.6.1 can also be specified as INI_SCANNER_TYPED. In this mode
  boolean, null and integer types are preserved when possible. String values
  "true", "on" and "yes" are converted to true. "false", "off", "no" and "none"
  are considered false. "null" is converted to null in typed mode. Also, all
  numeric strings are converted to integer type if it is possible.

===============================================================================
[ Return Values ]

The settings are returned as an associative array on success, and false on
failure.

===============================================================================
[ Examples ]

Example #1 Contents of sample.ini

; This is a sample configuration file
; Comments start with ';', as in php.ini

[first_section]
one = 1
five = 5
animal = BIRD

[second_section]
path = "/usr/local/bin"
URL = "http://www.example.com/~username"

[third_section]
phpversion[] = "5.0"
phpversion[] = "5.1"
phpversion[] = "5.2"
phpversion[] = "5.3"

urls[svn] = "http://svn.php.net"
urls[git] = "http://git.php.net"

Example #2 parse_ini_file() example

Constants (but not "magic constants" like __FILE__) may also be parsed in the
ini file so if you define a constant as an ini value before running 
parse_ini_file(), it will be integrated into the results. Only ini values are
evaluated, and the value must be just the constant. For example:

<?php >

  define('BIRD', 'Dodo bird');

  // Parse without sections
  $ini_array = parse_ini_file("sample.ini");
  print_r($ini_array);

  // Parse with sections
  $ini_array = parse_ini_file("sample.ini", true);
  print_r($ini_array);

<?>

The above example will output something similar to:

Array
(
    [one] => 1
    [five] => 5
    [animal] => Dodo bird
    [path] => /usr/local/bin
    [URL] => http://www.example.com/~username
    [phpversion] => Array
        (
            [0] => 5.0
            [1] => 5.1
            [2] => 5.2
            [3] => 5.3
        )

    [urls] => Array
        (
            [svn] => http://svn.php.net
            [git] => http://git.php.net
        )

)
Array
(
    [first_section] => Array
        (
            [one] => 1
            [five] => 5
            [animal] => Dodo bird
        )

    [second_section] => Array
        (
            [path] => /usr/local/bin
            [URL] => http://www.example.com/~username
        )

    [third_section] => Array
        (
            [phpversion] => Array
                (
                    [0] => 5.0
                    [1] => 5.1
                    [2] => 5.2
                    [3] => 5.3
                )

            [urls] => Array
                (
                    [svn] => http://svn.php.net
                    [git] => http://git.php.net
                )

        )

)

Example #3 parse_ini_file() parsing a php.ini file

<?php >
  // A simple function used for comparing the results below
  function yesno($expression)
  {
  return($expression ? 'Yes' : 'No');
  }

  // Get the path to php.ini using the php_ini_loaded_file() function
  $ini_path = php_ini_loaded_file();

  // Parse php.ini
  $ini = parse_ini_file($ini_path);

  // Print and compare the values, note that using get_cfg_var()
  // will give the same results for parsed and loaded here
  echo '(parsed) magic_quotes_gpc = ' . yesno($ini['magic_quotes_gpc']) . PHP_EOL
  ;
  echo '(loaded) magic_quotes_gpc = ' . yesno(get_cfg_var('magic_quotes_gpc')) . 
  PHP_EOL;
<?>

The above example will output something similar to:

(parsed) magic_quotes_gpc = Yes
(loaded) magic_quotes_gpc = Yes

Example #4 Value Interpolation

In addition to evaluating constants, certain characters have special meaning in
an ini value. Additionally, environment variables and previously defined
configuration options (see |get_cfg_var|) may be read using ${} syntax.

; | is used for bitwise OR
three = 2|3

; & is used for bitwise AND
four = 6&5

; ^ is used for bitwise XOR
five = 3^6

; ~ is used for bitwise negate
negative_two = ~1

; () is used for grouping
seven = (8|7)&(6|5)

; Interpolate the PATH environment variable
path = ${PATH}

; Interpolate the configuration option 'memory_limit'
configured_memory_limit = ${memory_limit}


Example #5 Escaping Characters

Some characters have special meaning in double-quoted strings and must be
escaped by the backslash prefix. First of all, these are the double quote " as
the boundary marker, and the backslash \ itself (if followed by one of the
special characters):

quoted = "She said \"Exactly my point\"." ; Results in a string with quote marks in it.
hint = "Use \\\" to escape double quote" ; Results in: Use \" to escape double quote

There is an exception made for Windows-like paths: it's possible to not escape
trailing backslash if the quoted string is directly followed by a linebreak:

save_path = "C:\Temp\"

If one does need to escape double quote followed by linebreak in a multiline
value, it's possible to use value concatenation in the following way (there is
one double-quoted string directly followed by another one):

long_text = "Lorem \"ipsum\"""
 dolor" ; Results in: Lorem "ipsum"\n dolor

Another character with special meaning is $ (the dollar sign). It must be
escaped if followed by the open curly brace:

code = "\${test}"

Escaping characters is not supported in the INI_SCANNER_RAW mode (in this mode
all characters are processed "as is").

Note that the ini parser doesn't support standard escape sequences (\n, \t,
etc.). If necessary, post-process the result of parse_ini_file() with 
|stripcslashes| function.

===============================================================================
[ Notes ]

  Note:

  This function has nothing to do with the php.ini file. It is already
  processed by the time you run your script. This function can be used to read
  in your own application's configuration files.

  Note:

  If a value in the ini file contains any non-alphanumeric characters it needs
  to be enclosed in double-quotes (").

  Note: There are reserved words which must not be used as keys for ini files.
  These include: null, yes, no, true, false, on, off, none. Values null, off,
  no and false result in "", and values on, yes and true result in "1", unless
  INI_SCANNER_TYPED mode is used. Characters ?{}|&~!()^" must not be used
  anywhere in the key and have a special meaning in the value.

  Note:

  Entries without an equal sign are ignored. For example, "foo" is ignored
  whereas "bar =" is parsed and added with an empty value. For example, MySQL
  has a "no-auto-rehash" setting in my.cnf that does not take a value, so it is
  ignored.

  Note:

  ini files are generally treated as plain text by web servers and thus served
  to browsers if requested. That means for security you must either keep your
  ini files outside of your docroot or reconfigure your web server to not serve
  them. Failure to do either of those may introduce a security risk.

===============================================================================
[ See Also ]

 * |parse_ini_string| - Parse a configuration string


vim:ft=help: