*pg_meta_data*

(PHP 4 >= 4.3.0, PHP 5, PHP 7, PHP 8)

pg_meta_data â€” Get meta data for table

===============================================================================
[ Description ]

  pg_meta_data(PgSql\Connection $connection, string $table_name, bool~
  $extended = false): array|false~

pg_meta_data() returns table definition for table_name as an array.

===============================================================================
[ Parameters ]

{connection}

  An PgSql\Connection instance.

{table_name}

  The name of the table.

{extended}

  Flag for returning extended meta data. Default to false.

===============================================================================
[ Return Values ]

An array of the table definition, or false on failure.

===============================================================================
[ Changelog ]

Version                               Description
8.1.0   The {connection} parameter expects an PgSql\Connection instance now;
        previously, a resource was expected.

===============================================================================
[ Examples ]

Example #1 Getting table metadata

<?php >
  $dbconn = pg_connect("dbname=publisher") or die("Could not connect");

  $meta = pg_meta_data($dbconn, 'authors');
  if (is_array($meta)) {
  echo '<pre>';
  var_dump($meta);
  echo '</pre>';
  }
<?>

The above example will output:

array(3) {
["author"]=>
array(5) {
  ["num"]=>
  int(1)
  ["type"]=>
  string(7) "varchar"
  ["len"]=>
  int(-1)
  ["not null"]=>
  bool(false)
  ["has default"]=>
  bool(false)
}
["year"]=>
array(5) {
  ["num"]=>
  int(2)
  ["type"]=>
  string(4) "int2"
  ["len"]=>
  int(2)
  ["not null"]=>
  bool(false)
  ["has default"]=>
  bool(false)
}
["title"]=>
array(5) {
  ["num"]=>
  int(3)
  ["type"]=>
  string(7) "varchar"
  ["len"]=>
  int(-1)
  ["not null"]=>
  bool(false)
  ["has default"]=>
  bool(false)
}
}

===============================================================================
[ See Also ]

 * |pg_convert| - Convert associative array values into forms suitable for SQL
  statements


vim:ft=help: