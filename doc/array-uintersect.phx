*array_uintersect*

(PHP 5, PHP 7, PHP 8)

array_uintersect â€” Computes the intersection of arrays, compares data by a
callback function

===============================================================================
[ Description ]

  array_uintersect(array $array, array ...$arrays, callable~
  $value_compare_func): array~

Computes the intersection of arrays, compares data by a callback function.

===============================================================================
[ Parameters ]

{array}

  The first array.

{arrays}

  Arrays to compare against.

{value_compare_func}

  The comparison function must return an integer less than, equal to, or
  greater than zero if the first argument is considered to be respectively less
  than, equal to, or greater than the second.


  callback(mixed $a, mixed $b): int~
  Caution

  Returning non-integer values from the comparison function, such as float,
  will result in an internal cast to int of the callback's return value. So
  values such as 0.99 and 0.1 will both be cast to an integer value of 0, which
  will compare such values as equal.

  Caution

  The sorting callback must handle any value from any array in any order,
  regardless of the order they were originally provided. This is because each
  individual array is first sorted before being compared against other arrays.
  For example:
  <?php >
  $arrayA = ["string", 1];
  $arrayB = [["value" => 1]];
  // $item1 and $item2 can be any of "string", 1 or ["value" => 1]
  $compareFunc = static function ($item1, $item2) {
  $value1 = is_string($item1) ? strlen($item1) : (is_array($item1) ? $item1[
  "value"] : $item1);
  $value2 = is_string($item2) ? strlen($item2) : (is_array($item2) ? $item2[
  "value"] : $item2);
  return $value1 <=> $value2;
  };
<  ?>

===============================================================================
[ Return Values ]

Returns an array containing all the values of {array} that are present in all
the arguments.

===============================================================================
[ Examples ]

Example #1 array_uintersect() example

<?php >
  $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
  $array2 = array("a" => "GREEN", "B" => "brown", "yellow", "red");

  print_r(array_uintersect($array1, $array2, "strcasecmp"));
<?>

The above example will output:

Array
(
    [a] => green
    [b] => brown
    [0] => red
)

===============================================================================
[ See Also ]

 * |array_intersect| - Computes the intersection of arrays
 * |array_intersect_assoc| - Computes the intersection of arrays with
  additional index check
 * |array_uintersect_assoc| - Computes the intersection of arrays with
  additional index check, compares data by a callback function
 * |array_uintersect_uassoc| - Computes the intersection of arrays with
  additional index check, compares data and indexes by separate callback
  functions


vim:ft=help: