*vsprintf*

(PHP 4 >= 4.1.0, PHP 5, PHP 7, PHP 8)

vsprintf — Return a formatted string

===============================================================================
[ Description ]

  vsprintf(string $format, array $values): string~

Operates as |sprintf| but accepts an array of arguments, rather than a variable
number of arguments.

===============================================================================
[ Parameters ]

{format}

  The format string is composed of zero or more directives: ordinary characters
  (excluding %) that are copied directly to the result and conversion
  specifications, each of which results in fetching its own parameter.

  A conversion specification follows this prototype: %[argnum$][flags][width]
  [.precision]specifier.

  Argnum

  An integer followed by a dollar sign $, to specify which number argument to
  treat in the conversion.

                                     Flags
   Flag                                Description
  -       Left-justify within the given field width; Right justification is the
          default
  +       Prefix positive numbers with a plus sign +; Default only negative are
          prefixed with a negative sign.
  (space) Pads the result with spaces. This is the default.
  0       Only left-pads numbers with zeros. With s specifiers this can also
          right-pad with zeros.
  '(char) Pads the result with the character (char).

  Width

  Either an integer that says how many characters (minimum) this conversion
  should result in, or *. If * is used, then the width is supplied as an
  additional integer value preceding the one formatted by the specifier.

  Precision

  A period . optionally followed by either an integer or *, whose meaning
  depends on the specifier:
   + For e, E, f and F specifiers: this is the number of digits to be printed
    after the decimal point (by default, this is 6).
   + For g, G, h and H specifiers: this is the maximum number of significant
    digits to be printed.
   + For s specifier: it acts as a cutoff point, setting a maximum character
    limit to the string.


    Note: If the period is specified without an explicit value for precision, 0
    is assumed. If * is used, the precision is supplied as an additional
    integer value preceding the one formatted by the specifier.

                                  Specifiers
  Specifier                             Description
  %         A literal percent character. No argument is required.
  b         The argument is treated as an integer and presented as a binary
            number.
  c         The argument is treated as an integer and presented as the
            character with that ASCII.
  d         The argument is treated as an integer and presented as a (signed)
            decimal number.
  e         The argument is treated as scientific notation (e.g. 1.2e+2).
  E         Like the e specifier but uses uppercase letter (e.g. 1.2E+2).
  f         The argument is treated as a float and presented as a
            floating-point number (locale aware).
  F         The argument is treated as a float and presented as a
            floating-point number (non-locale aware).
            General format.

            Let P equal the precision if nonzero, 6 if the precision is
            omitted, or 1 if the precision is zero. Then, if a conversion with
  g         style E would have an exponent of X:

            If P > X ≥ −4, the conversion is with style f and precision P − (X
            + 1). Otherwise, the conversion is with style e and precision P −
            1.

  G         Like the g specifier but uses E and f.
  h         Like the g specifier but uses F. Available as of PHP 8.0.0.
  H         Like the g specifier but uses E and F. Available as of PHP 8.0.0.
  o         The argument is treated as an integer and presented as an octal
            number.
  s         The argument is treated and presented as a string.
  u         The argument is treated as an integer and presented as an unsigned
            decimal number.
  x         The argument is treated as an integer and presented as a
            hexadecimal number (with lowercase letters).
  X         The argument is treated as an integer and presented as a
            hexadecimal number (with uppercase letters).

  Warning

  The c type specifier ignores padding and width.

  Warning

  Attempting to use a combination of the string and width specifiers with
  character sets that require more than one byte per character may result in
  unexpected results.

  Variables will be co-erced to a suitable type for the specifier:

         Type Handling
   Type        Specifiers
  string s
  int    d, u, c, o, x, X, b
  float  e, E, f, F, g, G, h, H

{values}

===============================================================================
[ Return Values ]

Return array values as a formatted string according to {format}.

===============================================================================
[ Errors/Exceptions ]

As of PHP 8.0.0, a ValueError is thrown if the number of arguments is zero.
Prior to PHP 8.0.0, a E_WARNING was emitted instead.

As of PHP 8.0.0, a ValueError is thrown if [width] is less than zero or bigger
than PHP_INT_MAX. Prior to PHP 8.0.0, a E_WARNING was emitted instead.

As of PHP 8.0.0, a ValueError is thrown if [precision] is less than zero or
bigger than PHP_INT_MAX. Prior to PHP 8.0.0, a E_WARNING was emitted instead.

As of PHP 8.0.0, a ValueError is thrown when less arguments are given than
required. Prior to PHP 8.0.0, false was returned and a E_WARNING emitted
instead.

===============================================================================
[ Changelog ]

Version                               Description
8.0.0   This function no longer returns false on failure.
8.0.0   Throw a ValueError if the number of arguments is zero; previously this
        function emitted a E_WARNING instead.
8.0.0   Throw a ValueError if [width] is less than zero or bigger than
        PHP_INT_MAX; previously this function emitted a E_WARNING instead.
8.0.0   Throw a ValueError if [precision] is less than zero or bigger than
        PHP_INT_MAX; previously this function emitted a E_WARNING instead.
8.0.0   Throw a ValueError when less arguments are given than required;
        previously this function emitted a E_WARNING instead.

===============================================================================
[ Examples ]

Example #1 vsprintf(): zero-padded integers

<?php >
  print vsprintf("%04d-%02d-%02d", explode('-', '1988-8-1'));
<?>

The above example will output:

1988-08-01

===============================================================================
[ See Also ]

 * |printf| - Output a formatted string
 * |sprintf| - Return a formatted string
 * |fprintf| - Write a formatted string to a stream
 * |vprintf| - Output a formatted string
 * |vfprintf| - Write a formatted string to a stream
 * |sscanf| - Parses input from a string according to a format
 * |fscanf| - Parses input from a file according to a format
 * |number_format| - Format a number with grouped thousands
 * |date| - Format a Unix timestamp


vim:ft=help: