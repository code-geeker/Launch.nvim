*oci_field_type_raw*

(PHP 5, PHP 7, PHP 8, PECL OCI8 >= 1.1.0)

oci_field_type_raw â€” Tell the raw Oracle data type of the field

===============================================================================
[ Description ]

  oci_field_type_raw(resource $statement, string|int $column): int|false~

Returns Oracle's raw "SQLT" data type of the {column}.

If you want a field's type name, then use |oci_field_type| instead.

===============================================================================
[ Parameters ]

{statement}

  A valid OCI statement identifier.

{column}

  Can be the field's index (1-based) or name.

===============================================================================
[ Return Values ]

Returns Oracle's raw data type as a number, or false on failure

===============================================================================
[ Examples ]

Example #1 oci_field_type_raw() Example

<?php >

  // Create the table with:
  // CREATE TABLE mytab (number_col NUMBER, varchar2_col varchar2(1), clob_col
  CLOB, date_col DATE);

  $conn = oci_connect("hr", "hrpwd", "localhost/XE");
  if (!$conn) {
  $m = oci_error();
  trigger_error(htmlentities($m['message']), E_USER_ERROR);
  }

  $stid = oci_parse($conn, 'select * from mytab');
  oci_execute($stid, OCI_DESCRIBE_ONLY); // Use OCI_DESCRIBE_ONLY if not fetching
  rows
  $n = oci_num_fields($stid);
  for ($i = 1; $i <= $n; ++$i) {
  echo oci_field_name($stid, $i) . " is raw type: " . oci_field_type_raw($stid, 
  $i) . "<br>\n";
  }

  // Output is:
  // NUMBER_COL is raw type: 2
  // VARCHAR2_COL is raw type: 1
  // CLOB_COL is raw type: 112
  // DATE_COL is raw type: 12

  oci_free_statement($stid);
  oci_close($conn);

<?>


vim:ft=help: