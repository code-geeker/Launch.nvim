*usort*

(PHP 4, PHP 5, PHP 7, PHP 8)

usort â€” Sort an array by values using a user-defined comparison function

===============================================================================
[ Description ]

  usort(array &$array, callable $callback): true~

Sorts {array} in place by values using a user-supplied comparison function to
determine the order.

  Note:

  If two members compare as equal, they retain their original order. Prior to
  PHP 8.0.0, their relative order in the sorted array was undefined.

  Note: This function assigns new keys to the elements in {array}. It will
  remove any existing keys that may have been assigned, rather than just
  reordering the keys.

===============================================================================
[ Parameters ]

{array}

  The input array.

{callback}

  The comparison function must return an integer less than, equal to, or
  greater than zero if the first argument is considered to be respectively less
  than, equal to, or greater than the second.


  callback(mixed $a, mixed $b): int~
  Caution

  Returning non-integer values from the comparison function, such as float,
  will result in an internal cast to int of the callback's return value. So
  values such as 0.99 and 0.1 will both be cast to an integer value of 0, which
  will compare such values as equal.

===============================================================================
[ Return Values ]

Always returns true.

===============================================================================
[ Changelog ]

Version                               Description
8.2.0   The return type is true now; previously, it was bool.
8.0.0   If {callback} expects a parameter to be passed by reference, this
        function will now emit an E_WARNING.

===============================================================================
[ Examples ]

Example #1 usort() example

<?php >
  function cmp($a, $b)
  {
  if ($a == $b) {
  return 0;
  }
  return ($a < $b) ? -1 : 1;
  }

  $a = array(3, 2, 5, 6, 1);

  usort($a, "cmp");

  foreach ($a as $key => $value) {
  echo "$key: $value\n";
  }
<?>

The above example will output:

0: 1
1: 2
2: 3
3: 5
4: 6

The spaceship operator may be used to simplify the internal comparison even
further.

<?php >
  function cmp($a, $b)
  {
  return $a <=> $b;
  }

  $a = array(3, 2, 5, 6, 1);

  usort($a, "cmp");

  foreach ($a as $key => $value) {
  echo "$key: $value\n";
  }
<?>

  Note:

  Obviously in this trivial case the |sort| function would be more appropriate.

Example #2 usort() example using multi-dimensional array

<?php >
  function cmp($a, $b)
  {
  return strcmp($a["fruit"], $b["fruit"]);
  }

  $fruits[0]["fruit"] = "lemons";
  $fruits[1]["fruit"] = "apples";
  $fruits[2]["fruit"] = "grapes";

  usort($fruits, "cmp");

  foreach ($fruits as $key => $value) {
  echo "\$fruits[$key]: " . $value["fruit"] . "\n";
  }
<?>

When sorting a multi-dimensional array, $a and $b contain references to the
first index of the array.

The above example will output:

$fruits[0]: apples
$fruits[1]: grapes
$fruits[2]: lemons

Example #3 usort() example using a member function of an object

<?php >
  class TestObj {
  private string $name;

  function __construct($name)
  {
  $this->name = $name;
  }

  /* This is the static comparing function: */
  static function cmp_obj($a, $b)
  {
  return strtolower($a->name) <=> strtolower($b->name);
  }
  }

  $a[] = new TestObj("c");
  $a[] = new TestObj("b");
  $a[] = new TestObj("d");

  usort($a, [TestObj::class, "cmp_obj"]);

  foreach ($a as $item) {
  echo $item->name . "\n";
  }
<?>

The above example will output:

b
c
d

Example #4 usort() example using a closure to sort a multi-dimensional array

<?php >
  $array[0] = array('key_a' => 'z', 'key_b' => 'c');
  $array[1] = array('key_a' => 'x', 'key_b' => 'b');
  $array[2] = array('key_a' => 'y', 'key_b' => 'a');

  function build_sorter($key) {
  return function ($a, $b) use ($key) {
  return strnatcmp($a[$key], $b[$key]);
  };
  }

  usort($array, build_sorter('key_b'));

  foreach ($array as $item) {
  echo $item['key_a'] . ', ' . $item['key_b'] . "\n";
  }
<?>

The above example will output:

y, a
x, b
z, c

Example #5 usort() example using the spaceship operator

The spaceship operator allows for straightforward comparison of compound values
across multiple axes. The following example will sort $people by last name,
then by first name if the last name matches.

<?php >
  $people[0] = ['first' => 'Adam', 'last' => 'West'];
  $people[1] = ['first' => 'Alec', 'last' => 'Baldwin'];
  $people[2] = ['first' => 'Adam', 'last' => 'Baldwin'];

  function sorter(array $a, array $b) {
  return [$a['last'], $a['first']] <=> [$b['last'], $b['first']];
  }

  usort($people, 'sorter');

  foreach ($people as $person) {
  print $person['last'] . ', ' . $person['first'] . PHP_EOL;
  }
<?>

The above example will output:

Baldwin, Adam
Baldwin, Alec
West, Adam

===============================================================================
[ See Also ]

 * |uasort| - Sort an array with a user-defined comparison function and
  maintain index association
 * |uksort| - Sort an array by keys using a user-defined comparison function
 * The comparison of array sorting functions


vim:ft=help: