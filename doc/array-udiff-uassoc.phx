*array_udiff_uassoc*

(PHP 5, PHP 7, PHP 8)

array_udiff_uassoc â€” Computes the difference of arrays with additional index
check, compares data and indexes by a callback function

===============================================================================
[ Description ]

  array_udiff_uassoc(    array~
  $array,    array~
  ...$arrays,    callable~
  $value_compare_func,    callable $key_compare_func):~
  array~

Computes the difference of arrays with additional index check, compares data
and indexes by a callback function.

Note that the keys are used in the comparison unlike |array_diff| and 
|array_udiff|.

===============================================================================
[ Parameters ]

{array}

  The first array.

{arrays}

  Arrays to compare against.

{value_compare_func}

  The comparison function must return an integer less than, equal to, or
  greater than zero if the first argument is considered to be respectively less
  than, equal to, or greater than the second.


  callback(mixed $a, mixed $b): int~
  Caution

  Returning non-integer values from the comparison function, such as float,
  will result in an internal cast to int of the callback's return value. So
  values such as 0.99 and 0.1 will both be cast to an integer value of 0, which
  will compare such values as equal.

  Caution

  The sorting callback must handle any value from any array in any order,
  regardless of the order they were originally provided. This is because each
  individual array is first sorted before being compared against other arrays.
  For example:
  <?php >
  $arrayA = ["string", 1];
  $arrayB = [["value" => 1]];
  // $item1 and $item2 can be any of "string", 1 or ["value" => 1]
  $compareFunc = static function ($item1, $item2) {
  $value1 = is_string($item1) ? strlen($item1) : (is_array($item1) ? $item1[
  "value"] : $item1);
  $value2 = is_string($item2) ? strlen($item2) : (is_array($item2) ? $item2[
  "value"] : $item2);
  return $value1 <=> $value2;
  };
<  ?>

{key_compare_func}

  The comparison of keys (indices) is done also by the callback function
  {key_compare_func}. This behaviour is unlike what |array_udiff_assoc| does,
  since the latter compares the indices by using an internal function.

===============================================================================
[ Return Values ]

Returns an array containing all the values from {array} that are not present in
any of the other arguments.

===============================================================================
[ Examples ]

Example #1 array_udiff_uassoc() example

<?php >
  class cr {
  private $priv_member;
  function __construct($val)
  {
  $this->priv_member = $val;
  }

  static function comp_func_cr($a, $b)
  {
  if ($a->priv_member === $b->priv_member) return 0;
  return ($a->priv_member > $b->priv_member)? 1:-1;
  }

  static function comp_func_key($a, $b)
  {
  if ($a === $b) return 0;
  return ($a > $b)? 1:-1;
  }
  }
  $a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr
  (4), 2 => new cr(-15),);
  $b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(
  4), 2 => new cr(-15),);

  $result = array_udiff_uassoc($a, $b, array("cr", "comp_func_cr"), array("cr", 
  "comp_func_key"));
  print_r($result);
<?>

The above example will output:

Array
(
    [0.1] => cr Object
        (
            [priv_member:private] => 9
        )

    [0.5] => cr Object
        (
            [priv_member:private] => 12
        )

    [0] => cr Object
        (
            [priv_member:private] => 23
        )
)

In our example above you see the "1" => new cr(4) pair is present in both
arrays and thus it is not in the output from the function. Keep in mind that
you have to supply 2 callback functions.

===============================================================================
[ Notes ]

  Note: Please note that this function only checks one dimension of a
  n-dimensional array. Of course you can check deeper dimensions by using, for
  example, array_udiff_uassoc($array1[0], $array2[0], "data_compare_func",
  "key_compare_func");.

===============================================================================
[ See Also ]

 * |array_diff| - Computes the difference of arrays
 * |array_diff_assoc| - Computes the difference of arrays with additional index
  check
 * |array_udiff| - Computes the difference of arrays by using a callback
  function for data comparison
 * |array_udiff_assoc| - Computes the difference of arrays with additional
  index check, compares data by a callback function
 * |array_intersect| - Computes the intersection of arrays
 * |array_intersect_assoc| - Computes the intersection of arrays with
  additional index check
 * |array_uintersect| - Computes the intersection of arrays, compares data by a
  callback function
 * |array_uintersect_assoc| - Computes the intersection of arrays with
  additional index check, compares data by a callback function
 * |array_uintersect_uassoc| - Computes the intersection of arrays with
  additional index check, compares data and indexes by separate callback
  functions


vim:ft=help: